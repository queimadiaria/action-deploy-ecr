name: 'Deploy Service ECS'
description: 'Queima Labs DevOps Stack - Deploy Microservice - services no ECS da AWS'
inputs:
  new_relic_license: 
    description: New Relic License Key
    required: true
  access_token: 
    description: Personal Access Token scope read:pkg
    required: true
  environment_acronym: 
    description: Environment acronym to configure environment variables
    required: true
    default: dev
  config:
    description: String JSON to be mape
    required: true
    default: "{\"NODE_ENV\":\"local\"}"
  ecr:
    description: ECR Repository
    required: true
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-id }}
runs:
  using: "composite"
  steps:           
    - name: Get Environment names
      shell: bash
      env:
        ENVIRONMENT: ${{ inputs.environment_acronym }}
        CONFIG: ${{ inputs.config }}
      run: |
        cat>configs<<EOF
        $(echo $CONFIG | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]")
        EOF
        source configs
        sh config/environment.config.sh
        cat .env
    
    - name: Configure NPM
      shell: bash
      env:
        NODE_AUTH_TOKEN: ${{ inputs.access_token  }}
      run: |
        cat <<EOF > .npmrc
        @queimadiaria:registry=https://npm.pkg.github.com/
        //npm.pkg.github.com/:_authToken=$NODE_AUTH_TOKEN
        EOF


    - name: Build, tag, and push image to Amazon ECR
      shell: bash
      id: build-image
      env:
        ECR_REGISTRY: ${{ inputs.ecr }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build \
          --build-arg NODE_ENV=development \
          --build-arg NEW_RELIC_LICENSE_KEY=${{ inputs.new_relic_license }} \
          --build-arg NEW_RELIC_APP_NAME=${{ inputs.service-name }}-${{ inputs.service-stage }} \
          -t $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG"

    - name: Get Task Definition
      shell: bash
      run: |
        aws ecs describe-task-definition \
            --task-definition "task-${SERVICE_NAME}" \
            --region "us-east-1" \
            --query taskDefinition | \
          jq --arg img "${SERVICE_NAME}" \
            '.containerDefinitions[0].name = $img' > taskDefinition.json
          
        cat taskDefinition.json

        CLUSTER=$(aws ecs list-clusters | \
          jq ".clusterArns[]" -r | \
          cut -d "/" -f2 | \
          grep ${{ inputs.stage }})

        echo "CLUSTER=$CLUSTER" >> $GITHUB_ENV

